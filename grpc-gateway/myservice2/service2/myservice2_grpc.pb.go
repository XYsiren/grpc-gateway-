// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.1
// source: myservice2.proto

package service2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MyService2_Echo_FullMethodName       = "/service2.MyService2/Echo"
	MyService2_EchoBody_FullMethodName   = "/service2.MyService2/EchoBody"
	MyService2_EchoDelete_FullMethodName = "/service2.MyService2/EchoDelete"
	MyService2_EchoUpload_FullMethodName = "/service2.MyService2/EchoUpload"
)

// MyService2Client is the client API for MyService2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MyService2Client interface {
	Echo(ctx context.Context, in *SimpleMessage, opts ...grpc.CallOption) (*SimpleMessage, error)
	EchoBody(ctx context.Context, in *SimpleMessage, opts ...grpc.CallOption) (*SimpleMessage, error)
	EchoDelete(ctx context.Context, in *SimpleMessage, opts ...grpc.CallOption) (*SimpleMessage, error)
	EchoUpload(ctx context.Context, opts ...grpc.CallOption) (MyService2_EchoUploadClient, error)
}

type myService2Client struct {
	cc grpc.ClientConnInterface
}

func NewMyService2Client(cc grpc.ClientConnInterface) MyService2Client {
	return &myService2Client{cc}
}

func (c *myService2Client) Echo(ctx context.Context, in *SimpleMessage, opts ...grpc.CallOption) (*SimpleMessage, error) {
	out := new(SimpleMessage)
	err := c.cc.Invoke(ctx, MyService2_Echo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myService2Client) EchoBody(ctx context.Context, in *SimpleMessage, opts ...grpc.CallOption) (*SimpleMessage, error) {
	out := new(SimpleMessage)
	err := c.cc.Invoke(ctx, MyService2_EchoBody_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myService2Client) EchoDelete(ctx context.Context, in *SimpleMessage, opts ...grpc.CallOption) (*SimpleMessage, error) {
	out := new(SimpleMessage)
	err := c.cc.Invoke(ctx, MyService2_EchoDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myService2Client) EchoUpload(ctx context.Context, opts ...grpc.CallOption) (MyService2_EchoUploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &MyService2_ServiceDesc.Streams[0], MyService2_EchoUpload_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &myService2EchoUploadClient{stream}
	return x, nil
}

type MyService2_EchoUploadClient interface {
	Send(*UploadRequest) error
	CloseAndRecv() (*UploadResponse, error)
	grpc.ClientStream
}

type myService2EchoUploadClient struct {
	grpc.ClientStream
}

func (x *myService2EchoUploadClient) Send(m *UploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *myService2EchoUploadClient) CloseAndRecv() (*UploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MyService2Server is the server API for MyService2 service.
// All implementations must embed UnimplementedMyService2Server
// for forward compatibility
type MyService2Server interface {
	Echo(context.Context, *SimpleMessage) (*SimpleMessage, error)
	EchoBody(context.Context, *SimpleMessage) (*SimpleMessage, error)
	EchoDelete(context.Context, *SimpleMessage) (*SimpleMessage, error)
	EchoUpload(MyService2_EchoUploadServer) error
	mustEmbedUnimplementedMyService2Server()
}

// UnimplementedMyService2Server must be embedded to have forward compatible implementations.
type UnimplementedMyService2Server struct {
}

func (UnimplementedMyService2Server) Echo(context.Context, *SimpleMessage) (*SimpleMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedMyService2Server) EchoBody(context.Context, *SimpleMessage) (*SimpleMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EchoBody not implemented")
}
func (UnimplementedMyService2Server) EchoDelete(context.Context, *SimpleMessage) (*SimpleMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EchoDelete not implemented")
}
func (UnimplementedMyService2Server) EchoUpload(MyService2_EchoUploadServer) error {
	return status.Errorf(codes.Unimplemented, "method EchoUpload not implemented")
}
func (UnimplementedMyService2Server) mustEmbedUnimplementedMyService2Server() {}

// UnsafeMyService2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MyService2Server will
// result in compilation errors.
type UnsafeMyService2Server interface {
	mustEmbedUnimplementedMyService2Server()
}

func RegisterMyService2Server(s grpc.ServiceRegistrar, srv MyService2Server) {
	s.RegisterService(&MyService2_ServiceDesc, srv)
}

func _MyService2_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyService2Server).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MyService2_Echo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyService2Server).Echo(ctx, req.(*SimpleMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyService2_EchoBody_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyService2Server).EchoBody(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MyService2_EchoBody_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyService2Server).EchoBody(ctx, req.(*SimpleMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyService2_EchoDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyService2Server).EchoDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MyService2_EchoDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyService2Server).EchoDelete(ctx, req.(*SimpleMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyService2_EchoUpload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MyService2Server).EchoUpload(&myService2EchoUploadServer{stream})
}

type MyService2_EchoUploadServer interface {
	SendAndClose(*UploadResponse) error
	Recv() (*UploadRequest, error)
	grpc.ServerStream
}

type myService2EchoUploadServer struct {
	grpc.ServerStream
}

func (x *myService2EchoUploadServer) SendAndClose(m *UploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *myService2EchoUploadServer) Recv() (*UploadRequest, error) {
	m := new(UploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MyService2_ServiceDesc is the grpc.ServiceDesc for MyService2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MyService2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service2.MyService2",
	HandlerType: (*MyService2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _MyService2_Echo_Handler,
		},
		{
			MethodName: "EchoBody",
			Handler:    _MyService2_EchoBody_Handler,
		},
		{
			MethodName: "EchoDelete",
			Handler:    _MyService2_EchoDelete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EchoUpload",
			Handler:       _MyService2_EchoUpload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "myservice2.proto",
}
